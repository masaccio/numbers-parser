==============
numbers-parser
==============

.. :currentmodule:: numbers_parser

``numbers-parser`` is a Python library to read data from `Apple Numbers <https://www.apple.com/numbers/>`_. It supports Numbers files generated by Numbers version 10.3, 11.0 and 11.1 (current as of June 2021).


Features
========

It supports and is tested against Python versions from 3.6 onwards. It is not compatible with earlier versions of Python.

Currently supported features of Numbers files are:

* Multiple sheets per document
* Multiple tables per sheet
* Text, numeric, date, currency, duration, percentage cell types
* Extraction of formulas

Numbers stores formula results in typed cells unless the formula evaluates to an error. ``numbers-parser`` returns formula results by default but also provides the :py:attribute::Cell.formula attribute to return the text formula. Since Numbers stores results, there is no formula evaluation support provided.


Installation
============

.. code-block:: shell

  pip install numbers-parser

The supported Python versions are 3.6+.


User guide
==========

Import the :py:class:`Document` class from ``numbers_parser`` to get started.

.. code-block:: python

  from numbers_parser import Document


Usage
=====

A :py:class:`Document` object provides the primary interface to interacting with Numbers spreadsheets, and takes a path to a Numbers spreadsheet which can be a directory or single file with a ``.numbers`` filename extension:

.. code-block:: python

  from numbers_parser import Document
  doc = Document("my-spreasdsheet.numbers")


Referring to sheets and tables
------------------------------

The :py:meth:`Document.sheets` method returns a list of :py:class:`Sheet` objects which can be indexed either by a list offset or the sheet name:

.. code-block:: python

  sheets = doc.sheets
  # list access method
  sheet_1 = sheets[0]
  print("Opened sheet", sheet_1.name)
  
  # dict access method
  sheet_2 = sheets["Tax"]
  print("Opened sheet", sheet_2.name)

In turn each :py:class:`Sheet` has a :py:meth:`Sheet.tables` method returns a list of :py:class:`Table` objects which can be indexed either by a list offset or the table name:

.. code-block:: python

  tables = sheet.tables
  # list access method
  table_1 = tables[0]
  print("Opened table", table_1.name)

  # dict access method
  table_2 = tables["Variables"]
  print("Opened table", table_2.name)


Accessing data
--------------

:py:class:`Table` objects have a :py:meth:`Table.rows()` method which returns a nested list with an entry for each row of the table. By default, :py:meth:`Sheet.rows()` returns :py:class:`Cell` objects, but ``values_only`` can be used to select the cell values instead:

.. code-block:: python

  rows = sheets["Table 1"].rows(values_only=True)
  print("Cell A1 contains", rows[0][0])
  print("Cell C2 contains", rows[2][1])


Cell references
---------------

In addition to extracting all table data at once, individual cells can be referred to as methods:

.. code-block:: python

  # row, column syntax
  print("Cell A1 contains", table.cell(0, 0).value)
  # Excel/Numbers-style cell references
  print("Cell C2 contains", table.cell("C2").value)


Merged cells
------------

When extracting data using :py:meth:`Table.rows()` merged cells can be identified as :py:class:`MergedCell`
objects which also return ``None`` when extracted as values or using the :attr:`.MergedCell.value`. When cells are merged, the cell in the top-left of the merge range is the cell chosen to contain the merged cell's data. These cells can be identified by the :attr:`.Cell.is_merged` property and have additional properties describing the extent of the merge range:

.. code-block:: python

  cell = table.cell("A1")
  print(cell.merge_range)
  print(f"Cell A1 merge size is {cell.size[0]},{cell.size[1]}")

Row and column iterators
------------------------

Tables have iterators for row-wise and column-wise iteration with each iterator
returning a list of the cells in that row or column:

.. code-block:: python

  for row in table.iter_rows(min_row=2, max_row=7, values_only=True):
     sum += row
  for col in table.iter_cole(min_row=2, max_row=7):
     sum += col.value

Welcome to numbers-parser's documentation!
==========================================

.. toctree::
   :maxdepth: 4
   :caption: Contents:

   const


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


API
===

.. autoclass:: numbers_parser.Document
   :members:
   :inherited-members:

.. autoclass:: numbers_parser.document.Sheet
   :members:
   :inherited-members:

.. autoclass:: numbers_parser.document.Table
   :members:
   :inherited-members:

.. autoclass:: numbers_parser.Cell
   :members:
   :inherited-members:


Numbers File Formats
====================

Numbers uses a proprietary, compressed binary format to store its tables. This format is comprised of a zip file containing preview images, as well as `Snappy <https://github.com/google/snappy>`_ compressed `Protobuf <https://github.com/protocolbuffers/protobuf>`_ ``.iwa`` files containing metadata, text, and all other definitions used in the spreadsheet.



Protobuf updates
================

As ``numbers-parser`` includes private Protobuf definitions extracted from a copy of Numbers,
new versions of Numbers will inevitably create ``.numbers`` files that cannot be read by ``numbers-parser``.

As new versions of Numbers are released, the following steps must be undertaken:

* Run `proto-dump <https://github.com/masaccio/proto-dump>`_ on the new copy of Numbers to dump
  new Proto files.
  * proto-dump assumes version 2.5.0 of Google Protobuf which may need changes to build on more modern OSes. The version linked here is maintained by the author and tested on recent macOS for both arm64 and x86_64 architectures.

  * Any ``.`` characters in the Protobuf definitions must be changed to ``_`` characters manually, or via the ``rename_proto_files.py`` script in the ``protos`` directory of this repo.

  * Connect to a running copy of Numbers with ``lldb`` (or any other debugger) and manually copy   and reformat the results of ``po [TSPRegistry sharedRegistry]`` into ``mapping.py``.
  * Versions of macOS >= 10.11 may protect Numbers from being attached to by a debugger - to attach, `temporarily disable System IntegrityProtection <https://developer.apple.com/ documentation/security/disabling_and_enabling_system_integrity_protection>`_ to get this data.
  * The ``generate_mapping.py`` script in ``protos`` should help turn the output from this step into a recreation of ``mapping.py``

Running ``make bootstrap`` will perform all of these steps and generate the Python protos files as well as ``mapping.py``. The makefile assumes that ``proto-dump`` is in a repo parallel to this one, but the make variable ``PROTO_DUMP`` can be overridden to pass the path to a working version of ``proto-dump``.

Credits
=======

``numbers-parser`` was built by `Jon Connell <http://github.com/masaccio>`_ but owes a lot to previous work by others:

* Reading of IWA Files is lifted from `keynote-parser <https://github.com/psobot/keynote-parser>`_ by `Peter Sobot <https://petersobot.com>`_.
* This package derives from investigations into iWork file formats by `Sean Patrick O'Brien <https://github.com/obriensp/iWorkFileFormat/blob/master/Docs/index.md>`_ and `Steven Lott <https://github.com/slott56/Stingray-Reader>`_.
* Formula tests were adapted from JavaScript tests used in `fast-formula-parser <https://github.com/LesterLyu/fast-formula-parser>`_.


License
=======

.. include:: ../LICENSE.rst
